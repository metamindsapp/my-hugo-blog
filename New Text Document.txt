import os
import fitz  # PyMuPDF
import re
from PyPDF2 import PdfReader
from slugify import slugify
from tkinter import Tk
from tkinter.filedialog import askopenfilename

# Directories for Markdown files and images
CONTENT_DIR = "content"
IMAGES_DIR = "static/images"

# Ensure directories exist
os.makedirs(CONTENT_DIR, exist_ok=True)
os.makedirs(IMAGES_DIR, exist_ok=True)

def extract_text_from_pdf(pdf_path):
    """Extract text from a PDF file."""
    reader = PdfReader(pdf_path)
    text = "\n".join(page.extract_text() for page in reader.pages if page.extract_text())
    return text

def extract_images_from_pdf(pdf_path, output_folder):
    """Extract images from a PDF file and save them to a folder."""
    doc = fitz.open(pdf_path)
    image_files = []

    for i, page in enumerate(doc):
        images = page.get_images(full=True)
        for img_index, img in enumerate(images):
            xref = img[0]
            base_image = doc.extract_image(xref)
            image_bytes = base_image["image"]
            ext = base_image["ext"]
            image_filename = os.path.join(output_folder, f"image_{i+1}_{img_index+1}.{ext}")
            with open(image_filename, "wb") as img_file:
                img_file.write(image_bytes)
            image_files.append(image_filename)

    return image_files

def text_to_markdown(text, title, image_files):
    """Convert text to Markdown format."""
    markdown = f"# {title}\n\n"
    markdown += text.strip() + "\n\n"

    for i, image in enumerate(image_files):
        markdown += f"![Image {i+1}]({image})\n"

    return markdown

def save_markdown_file(markdown, title):
    """Save Markdown content to a file."""
    slug = slugify(title)
    md_filename = os.path.join(CONTENT_DIR, f"{slug}.md")
    with open(md_filename, "w", encoding="utf-8") as md_file:
        md_file.write(markdown)
    return md_filename

def process_pdf(pdf_path):
    """Process a single PDF file: extract text, images, and save as Markdown."""
    # Assume title is the PDF filename without extension
    title = os.path.splitext(os.path.basename(pdf_path))[0]
    slug = slugify(title)
    image_output_folder = os.path.join(IMAGES_DIR, slug)
    os.makedirs(image_output_folder, exist_ok=True)

    # Extract content
    text = extract_text_from_pdf(pdf_path)
    image_files = extract_images_from_pdf(pdf_path, image_output_folder)

    # Convert to Markdown
    markdown = text_to_markdown(text, title, [os.path.relpath(img, start=CONTENT_DIR) for img in image_files])

    # Save Markdown file
    md_filename = save_markdown_file(markdown, title)

    print(f"Processed '{pdf_path}'\nMarkdown saved: {md_filename}\nImages saved to: {image_output_folder}")

def choose_pdf_file():
    """Prompt the user to select a PDF file using a file dialog."""
    Tk().withdraw()  # Hide the root Tkinter window
    file_path = askopenfilename(filetypes=[("PDF files", "*.pdf")], title="Select a PDF file")
    return file_path

if __name__ == "__main__":
    pdf_file = choose_pdf_file()
    if pdf_file and os.path.exists(pdf_file):
        process_pdf(pdf_file)
    else:
        print("No file selected or file does not exist.")
